// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ShinCacheTensei.Data;

namespace ShinCacheTensei.Migrations
{
    [DbContext(typeof(ShinCacheTenseiContext))]
    partial class ShinCacheTenseiContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ShinCacheTensei.Entities.AffinityType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AffinityTypes");

                    b.HasData(
                        new
                        {
                            Id = 5,
                            Name = "Weak"
                        });
                });

            modelBuilder.Entity("ShinCacheTensei.Entities.Demon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DemonRaceId")
                        .HasColumnType("int");

                    b.Property<int?>("InitialAgi")
                        .HasColumnType("int");

                    b.Property<int?>("InitialHp")
                        .HasColumnType("int");

                    b.Property<int?>("InitialLck")
                        .HasColumnType("int");

                    b.Property<int?>("InitialLevel")
                        .HasColumnType("int");

                    b.Property<int?>("InitialMag")
                        .HasColumnType("int");

                    b.Property<int?>("InitialMp")
                        .HasColumnType("int");

                    b.Property<int?>("InitialStr")
                        .HasColumnType("int");

                    b.Property<int?>("InitialVit")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RecruitingMethodId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DemonRaceId");

                    b.HasIndex("RecruitingMethodId");

                    b.ToTable("Demons");

                    b.HasData(
                        new
                        {
                            Id = 5,
                            DemonRaceId = 3,
                            InitialLevel = 50,
                            Name = "Leandro",
                            RecruitingMethodId = 3
                        },
                        new
                        {
                            Id = 6,
                            DemonRaceId = 3,
                            InitialLevel = 65,
                            Name = "Ralph",
                            RecruitingMethodId = 3
                        },
                        new
                        {
                            Id = 7,
                            DemonRaceId = 3,
                            InitialLevel = 31,
                            Name = "Alex",
                            RecruitingMethodId = 3
                        },
                        new
                        {
                            Id = 8,
                            DemonRaceId = 3,
                            InitialLevel = 26,
                            Name = "Ana Carla",
                            RecruitingMethodId = 3
                        },
                        new
                        {
                            Id = 9,
                            DemonRaceId = 3,
                            InitialLevel = 44,
                            Name = "Striker",
                            RecruitingMethodId = 3
                        },
                        new
                        {
                            Id = 10,
                            DemonRaceId = 3,
                            InitialLevel = 92,
                            Name = "Rocker",
                            RecruitingMethodId = 3
                        });
                });

            modelBuilder.Entity("ShinCacheTensei.Entities.DemonAffinity", b =>
                {
                    b.Property<int>("DemonId")
                        .HasColumnType("int");

                    b.Property<int>("NatureId")
                        .HasColumnType("int");

                    b.Property<int>("AffinityTypeId")
                        .HasColumnType("int");

                    b.HasKey("DemonId", "NatureId", "AffinityTypeId");

                    b.HasIndex("AffinityTypeId");

                    b.HasIndex("NatureId");

                    b.ToTable("DemonAffinities");

                    b.HasData(
                        new
                        {
                            DemonId = 5,
                            NatureId = 5,
                            AffinityTypeId = 5
                        });
                });

            modelBuilder.Entity("ShinCacheTensei.Entities.DemonInitialSkill", b =>
                {
                    b.Property<int>("DemonId")
                        .HasColumnType("int");

                    b.Property<int>("SkillId")
                        .HasColumnType("int");

                    b.Property<int>("UnlockLevel")
                        .HasColumnType("int");

                    b.HasKey("DemonId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("DemonInitialSkills");

                    b.HasData(
                        new
                        {
                            DemonId = 5,
                            SkillId = 5,
                            UnlockLevel = 67
                        });
                });

            modelBuilder.Entity("ShinCacheTensei.Entities.DemonRace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DemonRaces");

                    b.HasData(
                        new
                        {
                            Id = 3,
                            Name = "Warrior"
                        });
                });

            modelBuilder.Entity("ShinCacheTensei.Entities.Nature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Natures");

                    b.HasData(
                        new
                        {
                            Id = 5,
                            Name = "Fire"
                        });
                });

            modelBuilder.Entity("ShinCacheTensei.Entities.RecruitingMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RecruitingMethods");

                    b.HasData(
                        new
                        {
                            Id = 3,
                            Description = "Fusion only"
                        });
                });

            modelBuilder.Entity("ShinCacheTensei.Entities.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Cost")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SkillTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SkillTypeId");

                    b.ToTable("Skills");

                    b.HasData(
                        new
                        {
                            Id = 5,
                            Cost = 80,
                            Description = "Deals 100 sacred damage to all foes",
                            Name = "Megido",
                            SkillTypeId = 3
                        });
                });

            modelBuilder.Entity("ShinCacheTensei.Entities.SkillType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SkillTypes");

                    b.HasData(
                        new
                        {
                            Id = 3,
                            Type = "HP"
                        });
                });

            modelBuilder.Entity("ShinCacheTensei.Entities.Demon", b =>
                {
                    b.HasOne("ShinCacheTensei.Entities.DemonRace", "Race")
                        .WithMany("Demons")
                        .HasForeignKey("DemonRaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShinCacheTensei.Entities.RecruitingMethod", "RecruitingMethod")
                        .WithMany("Demons")
                        .HasForeignKey("RecruitingMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Race");

                    b.Navigation("RecruitingMethod");
                });

            modelBuilder.Entity("ShinCacheTensei.Entities.DemonAffinity", b =>
                {
                    b.HasOne("ShinCacheTensei.Entities.AffinityType", "AffinityType")
                        .WithMany("DemonAffinities")
                        .HasForeignKey("AffinityTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShinCacheTensei.Entities.Demon", "Demon")
                        .WithMany("DemonAffinities")
                        .HasForeignKey("DemonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShinCacheTensei.Entities.Nature", "Nature")
                        .WithMany("DemonAffinities")
                        .HasForeignKey("NatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AffinityType");

                    b.Navigation("Demon");

                    b.Navigation("Nature");
                });

            modelBuilder.Entity("ShinCacheTensei.Entities.DemonInitialSkill", b =>
                {
                    b.HasOne("ShinCacheTensei.Entities.Demon", "Demon")
                        .WithMany("DemonInitialSkills")
                        .HasForeignKey("DemonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShinCacheTensei.Entities.Skill", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Demon");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("ShinCacheTensei.Entities.Skill", b =>
                {
                    b.HasOne("ShinCacheTensei.Entities.SkillType", "SkillType")
                        .WithMany("Skills")
                        .HasForeignKey("SkillTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SkillType");
                });

            modelBuilder.Entity("ShinCacheTensei.Entities.AffinityType", b =>
                {
                    b.Navigation("DemonAffinities");
                });

            modelBuilder.Entity("ShinCacheTensei.Entities.Demon", b =>
                {
                    b.Navigation("DemonAffinities");

                    b.Navigation("DemonInitialSkills");
                });

            modelBuilder.Entity("ShinCacheTensei.Entities.DemonRace", b =>
                {
                    b.Navigation("Demons");
                });

            modelBuilder.Entity("ShinCacheTensei.Entities.Nature", b =>
                {
                    b.Navigation("DemonAffinities");
                });

            modelBuilder.Entity("ShinCacheTensei.Entities.RecruitingMethod", b =>
                {
                    b.Navigation("Demons");
                });

            modelBuilder.Entity("ShinCacheTensei.Entities.SkillType", b =>
                {
                    b.Navigation("Skills");
                });
#pragma warning restore 612, 618
        }
    }
}
